"use strict";const v=/[^\t\n\f />"'=]/,R=" ",E="=",A=".",$="#",u=(e,t,{left:n,right:s,allowed:l})=>{let i="",o="",r=!0,f=!1;const c=[];for(let a=t+n.length;a<e.length;a++){if(e.slice(a,a+s.length)===s){i!==""&&c.push([i,o]);break}const h=e.charAt(a);if(h===E&&r){r=!1;continue}if(h===A&&i===""){e.charAt(a+1)===A?(i="css-module",a+=1):i="class",r=!1;continue}if(h===$&&i===""){i="id",r=!1;continue}if(h==='"'&&o===""){f=!0;continue}if(h==='"'&&f){f=!1;continue}if(h===R&&!f){if(i==="")continue;c.push([i,o]),i="",o="",r=!0;continue}if(!(r&&h.search(v)===-1)){if(r){i+=h;continue}o+=h}}return l.length?c.filter(([a])=>l.some(h=>h instanceof RegExp?h.test(a):h===a)):c},d=(e,t)=>{t&&e.forEach(n=>{const[s,l]=n;s==="class"?t.attrJoin("class",l):s==="css-module"?t.attrJoin("css-module",l):t.attrPush(n)})},w=(e,t)=>t>=0?e[t]:e[e.length+t],b=e=>e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"),I=e=>Array.isArray(e)&&Boolean(e.length)&&e.every(t=>typeof t=="function"),S=e=>Array.isArray(e)&&Boolean(e.length)&&e.every(t=>typeof t=="object"),y=(e,t,n)=>s=>{const l=t.length,i=n.length,o=l+1+i;if(!s||typeof s!="string"||s.length<o)return!1;const r=p=>{const _=p.charAt(l)===".",O=p.charAt(l)==="#";return _||O?p.length>=o+1:p.length>=o};let f,c,a,h;const g=o-i;switch(e){case"start":a=s.slice(0,l),f=a===t?0:-1,c=f===-1?-1:s.indexOf(n,g),h=s.charAt(c+i),h&&n.indexOf(h)!==-1&&(c=-1);break;case"end":f=s.lastIndexOf(t),c=f===-1?-1:s.indexOf(n,f+g),c=c===s.length-i?c:-1;break;case"only":a=s.slice(0,l),f=a===t?0:-1,a=s.slice(s.length-i),c=a===n?s.length-i:-1;break}return f!==-1&&c!==-1&&r(s.substring(f,c+i))},j=(e,t,n)=>{const s=b(t),l=b(n),i=e.search(new RegExp(`[ \\n]?${s}[^${s}${l}]+${l}$`));return i!==-1?e.slice(0,i):e},m=(e,t)=>{if(e[t].type==="softbreak")return null;if(e[t].nesting===0)return e[t];const n=e[t].level,s=e[t].type.replace("_close","_open");for(;t>=0;--t)if(e[t].type===s&&e[t].level===n)return e[t];return null},D=e=>({name:"code-block",tests:[{shift:0,block:!0,info:y("end",e.left,e.right)}],transform:(t,n)=>{const s=t[n];let l="";const i=s.info.match(/{(?:[\d,-]+)}/);i&&(s.info=s.info.replace(i[0],""),l=i[0]);const o=s.info.lastIndexOf(e.left),r=u(s.info,o,e);d(r,s),s.info=`${j(s.info,e.left,e.right)} ${l}`}}),K=e=>[{name:"inline nesting 0",tests:[{shift:0,type:"inline",children:[{shift:-1,type:t=>t==="image"||t==="code_inline"},{shift:0,type:"text",content:y("start",e.left,e.right)}]}],transform:(t,n,s)=>{const l=t[n].children[s],i=l.content.indexOf(e.right),o=t[n].children[s-1],r=u(l.content,0,e);d(r,o),l.content.length===i+e.right.length?t[n].children.splice(s,1):l.content=l.content.slice(i+e.right.length)}},{name:"inline attributes",tests:[{shift:0,type:"inline",children:[{shift:-1,nesting:-1},{shift:0,type:"text",content:y("start",e.left,e.right)}]}],transform:(t,n,s)=>{const l=t[n].children[s],{content:i}=l,o=u(i,0,e),r=m(t[n].children,s-1);d(o,r),l.content=i.slice(i.indexOf(e.right)+e.right.length)}}],P=e=>({name:"table",tests:[{shift:0,type:"table_close"},{shift:1,type:"paragraph_open"},{shift:2,type:"inline",content:y("only",e.left,e.right)}],transform:(t,n)=>{const s=t[n+2],l=m(t,n),i=u(s.content,0,e);d(i,l),t.splice(n+1,3)}}),T=e=>[{name:"list softbreak",tests:[{shift:-2,type:"list_item_open"},{shift:0,type:"inline",children:[{position:-2,type:"softbreak"},{position:-1,type:"text",content:y("only",e.left,e.right)}]}],transform:(t,n,s)=>{const l=t[n].children[s],i=u(l.content,0,e);let o=n-2;for(;t[o-1]&&t[o-1].type!=="ordered_list_open"&&t[o-1].type!=="bullet_list_open";)o--;d(i,t[o-1]),t[n].children=t[n].children.slice(0,-2)}},{name:"list double softbreak",tests:[{shift:0,type:t=>t==="bullet_list_close"||t==="ordered_list_close"},{shift:1,type:"paragraph_open"},{shift:2,type:"inline",content:y("only",e.left,e.right),children:t=>t.length===1},{shift:3,type:"paragraph_close"}],transform:(t,n)=>{const s=t[n+2],l=u(s.content,0,e),i=m(t,n);d(l,i),t.splice(n+1,3)}},{name:"list item end",tests:[{shift:-2,type:"list_item_open"},{shift:0,type:"inline",children:[{position:-1,type:"text",content:y("end",e.left,e.right)}]}],transform:(t,n,s)=>{const l=t[n].children[s],{content:i}=l,o=u(i,i.lastIndexOf(e.left),e);d(o,t[n-2]);const r=i.slice(0,i.lastIndexOf(e.left));l.content=r[r.length-1]===" "?r.slice(0,-1):r}}],L=e=>({name:`
{.a} softbreak then curly in start`,tests:[{shift:0,type:"inline",children:[{position:-2,type:"softbreak"},{position:-1,type:"text",content:y("only",e.left,e.right)}]}],transform:(t,n,s)=>{const l=t[n].children[s],i=u(l.content,0,e);let o=n+1;for(;t[o+1]&&t[o+1].nesting===-1;)o++;const r=m(t,o);d(i,r),t[n].children=t[n].children.slice(0,-2)}}),M=e=>({name:"horizontal rule",tests:[{shift:0,type:"paragraph_open"},{shift:1,type:"inline",children:t=>t.length===1,content:t=>t.match(new RegExp(`^ {0,3}[-*_]{3,} ?${b(e.left)}[^${b(e.right)}]`))!==null},{shift:2,type:"paragraph_close"}],transform:(t,n)=>{const s=t[n];s.type="hr",s.tag="hr",s.nesting=0;const{content:l}=t[n+1],i=l.lastIndexOf(e.left),o=u(l,i,e);d(o,s),s.markup=l,t.splice(n+1,2)}}),B=e=>({name:"end of block",tests:[{shift:0,type:"inline",children:[{position:-1,content:y("end",e.left,e.right),type:t=>t!=="code_inline"&&t!=="math_inline"}]}],transform:(t,n,s)=>{const l=t[n].children[s],{content:i}=l,o=u(i,i.lastIndexOf(e.left),e);let r=n+1;for(;t[r+1]&&t[r+1].nesting===-1;)r++;const f=m(t,r);d(o,f);const c=i.slice(0,i.lastIndexOf(e.left));l.content=c[c.length-1]===" "?c.slice(0,-1):c}}),x=["fence","inline","table","list","hr","softbreak","block"],C=e=>{const t=e.rule===!1?[]:Array.isArray(e.rule)?e.rule.filter(s=>x.includes(s)):x,n=[];return t.includes("fence")&&n.push(D(e)),t.includes("inline")&&n.push(...K(e)),t.includes("list")&&n.push(...T(e)),t.includes("table")&&n.push(P(e)),t.includes("softbreak")&&n.push(L(e)),t.includes("hr")&&n.push(M(e)),t.includes("block")&&n.push(B(e)),n},k=(e,t,n)=>{var s,l;const i={match:!1,position:null},o=n.shift!==void 0?t+n.shift:n.position;if(n.shift!==void 0&&o<0)return i;const r=w(e,o);if(r===void 0)return i;for(const f of Object.keys(n)){if(f==="shift"||f==="position")continue;if(r[f]===void 0)return i;if(f==="children"&&S(n.children)){if(((s=r.children)==null?void 0:s.length)===0)return i;let a;const h=n.children,g=r.children;if(h!=null&&h.every(p=>p.position!==void 0)){if(a=h.every(p=>k(g,p.position,p).match),a){const p=((l=h[h.length-1])==null?void 0:l.position)||0;i.position=p>=0?p:g.length+p}}else for(let p=0;p<g.length;p++)if(a=h.every(_=>k(g,p,_).match),a){i.position=p;break}if(a===!1)return i;continue}const c=n[f];switch(typeof c){case"boolean":case"number":case"string":if(r[f]!==c)return i;break;case"function":if(!c(r[f]))return i;break;case"object":if(I(c)){if(c.every(a=>a(r[f]))===!1)return i;break}continue;default:throw new Error(`Unknown type of pattern test (key: ${f}). Test should be of type boolean, number, string, function or array of functions.`)}}return i.match=!0,i},J=(e,{left:t="{",right:n="}",allowed:s=[],rule:l="all"}={})=>{const i=C({left:t,right:n,allowed:s,rule:l}),o=({tokens:r})=>{for(let f=0;f<r.length;f++)for(let c=0;c<i.length;c++){const a=i[c];let h=null;a.tests.every(g=>{const p=k(r,f,g);return p.position!==null&&({position:h}=p),p.match})&&(a.transform(r,f,h),(a.name==="inline attributes"||a.name==="inline nesting 0")&&(c-=1))}};e.core.ruler.before("linkify","attrs",o)};exports.attrs=J;
//# sourceMappingURL=index.cjs.map
