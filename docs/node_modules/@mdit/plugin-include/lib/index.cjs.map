{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/plugin.ts"],"sourcesContent":["// https://spec.commonmark.org/0.29/#line-ending\nexport const NEWLINES_RE = /\\r\\n?|\\n/g;\n","import fs from \"node:fs\";\nimport path from \"upath\";\nimport { NEWLINES_RE } from \"./utils.js\";\n\nimport type { PluginWithOptions } from \"markdown-it\";\nimport type { RuleBlock } from \"markdown-it/lib/parser_block.js\";\nimport type { RuleCore } from \"markdown-it/lib/parser_core.js\";\nimport type Token from \"markdown-it/lib/token.js\";\nimport type { MarkdownItIncludeOptions } from \"./options.js\";\nimport type { IncludeEnv } from \"./types.js\";\n\ninterface ImportFileLineInfo {\n  filePath: string;\n  lineStart: number;\n  lineEnd: number | undefined;\n}\n\ninterface ImportFileRegionInfo {\n  filePath: string;\n  region: string;\n}\n\ntype ImportFileInfo = ImportFileLineInfo | ImportFileRegionInfo;\n\ninterface IncludeInfo {\n  cwd: string | null;\n  includedFiles: string[];\n  resolvedPath?: boolean;\n}\n\nconst INDENT_RE = /^([ \\t]*)(.*)\\n/gm;\nconst REGIONS_RE = [\n  /^<!-- ?#?((?:end)?region) ([\\w*-]+) ?-->$/, // markdown\n  /^\\/\\/ ?#?((?:end)?region) ([\\w*-]+)$/, // javascript, typescript, java\n  /^\\/\\* ?#((?:end)?region) ([\\w*-]+) ?\\*\\/$/, // css, less, scss\n  /^#pragma ((?:end)?region) ([\\w*-]+)$/, // C, C++\n  /^<!-- #?((?:end)?region) ([\\w*-]+) -->$/, // HTML, markdown\n  /^#((?:End )Region) ([\\w*-]+)$/, // Visual Basic\n  /^::#((?:end)region) ([\\w*-]+)$/, // Bat\n  /^# ?((?:end)?region) ([\\w*-]+)$/, // C#, PHP, Powershell, Python, perl & misc\n];\n\n// regexp to match the import syntax\nconst INCLUDE_RE =\n  /^@include\\(([^)]+(?:\\.[a-z0-9]+))(?:#([\\w-]+))?(?:\\{(\\d+)?-(\\d+)?\\})?\\)$/;\n\nconst dedent = (text: string): string => {\n  let match: RegExpMatchArray | null;\n  let minIndentLength = null;\n\n  while ((match = INDENT_RE.exec(text)) !== null) {\n    const [indentation, content] = match.slice(1);\n\n    if (!content) continue;\n\n    const indentLength = indentation.length;\n\n    if (indentLength > 0) {\n      minIndentLength =\n        minIndentLength !== null\n          ? Math.min(minIndentLength, indentLength)\n          : indentLength;\n    } else break;\n  }\n\n  if (minIndentLength) {\n    text = text.replace(\n      new RegExp(`^[ \\t]{${minIndentLength}}(.*)`, \"gm\"),\n      \"$1\"\n    );\n  }\n\n  return text;\n};\n\nconst testLine = (\n  line: string,\n  regexp: RegExp,\n  regionName: string,\n  end = false\n): boolean => {\n  const [full, tag, name] = regexp.exec(line.trim()) || [];\n\n  return Boolean(\n    full &&\n      tag &&\n      name === regionName &&\n      tag.match(end ? /^[Ee]nd ?[rR]egion$/ : /^[rR]egion$/)\n  );\n};\n\nconst findRegion = (\n  lines: string[],\n  regionName: string\n): { lineStart: number; lineEnd: number } | null => {\n  let regexp = null;\n  let lineStart = -1;\n\n  for (const [lineId, line] of lines.entries())\n    if (regexp === null) {\n      for (const reg of REGIONS_RE)\n        if (testLine(line, reg, regionName)) {\n          lineStart = lineId + 1;\n          regexp = reg;\n          break;\n        }\n    } else if (testLine(line, regexp, regionName, true))\n      return { lineStart, lineEnd: lineId };\n\n  return null;\n};\n\nexport const handleInclude = (\n  info: ImportFileInfo,\n  { cwd, includedFiles, resolvedPath }: IncludeInfo\n): string => {\n  const { filePath } = info;\n  let realPath = filePath;\n\n  if (!path.isAbsolute(filePath)) {\n    // if the importPath is relative path, we need to resolve it\n    // according to the markdown filePath\n    if (!cwd) {\n      console.error(\n        `[@mdit/plugin-include]: Error when resolving path: ${filePath}`\n      );\n\n      return \"\\nError when resolving path\\n\";\n    }\n\n    realPath = path.resolve(cwd, filePath);\n  }\n\n  includedFiles.push(realPath);\n\n  // check file existence\n  if (!fs.existsSync(realPath)) {\n    console.error(`[@mdit/plugin-include]: ${realPath} not found`);\n\n    return \"\\nFile not found\\n\";\n  }\n\n  // read file content\n  const fileContent = fs.readFileSync(realPath).toString();\n\n  const lines = fileContent.replace(NEWLINES_RE, \"\\n\").split(\"\\n\");\n  let results: string[] = [];\n\n  if (\"region\" in info) {\n    const region = findRegion(lines, info.region);\n\n    if (region) results = lines.slice(region.lineStart, region.lineEnd);\n  } else {\n    const { lineStart, lineEnd } = info;\n\n    results = lines.slice(lineStart ? lineStart - 1 : lineStart, lineEnd);\n  }\n\n  if (resolvedPath && realPath.endsWith(\".md\")) {\n    const dirName = path.dirname(realPath);\n\n    results.unshift(`@include-push(${dirName})`);\n    results.push(\"@include-pop()\");\n  }\n\n  return dedent(results.join(\"\\n\").replace(/\\n?$/, \"\\n\"));\n};\n\nexport const resolveInclude = (\n  content: string,\n  options: Required<MarkdownItIncludeOptions>,\n  { cwd, includedFiles }: IncludeInfo\n): string =>\n  content\n    .split(\"\\n\")\n    .map((line) => {\n      if (line.startsWith(\"@include\")) {\n        // check if it’s matched the syntax\n        const result = line.match(INCLUDE_RE);\n\n        if (result) {\n          const [, includePath, region, lineStart, lineEnd] = result;\n          const actualPath = options.getPath(includePath, cwd);\n          const resolvedPath =\n            options.resolveImagePath || options.resolveLinkPath;\n\n          const content = handleInclude(\n            {\n              filePath: actualPath,\n              ...(region\n                ? { region }\n                : {\n                    lineStart: lineStart ? Number(lineStart) : 0,\n                    lineEnd: lineEnd ? Number(lineEnd) : undefined,\n                  }),\n            },\n            { cwd, includedFiles, resolvedPath }\n          );\n\n          return options.deep && actualPath.endsWith(\".md\")\n            ? resolveInclude(content, options, {\n                cwd: path.isAbsolute(actualPath)\n                  ? path.dirname(actualPath)\n                  : cwd\n                  ? path.resolve(cwd, path.dirname(actualPath))\n                  : null,\n                includedFiles,\n              })\n            : content;\n        }\n      }\n\n      return line;\n    })\n    .join(\"\\n\");\n\nexport const createIncludeCoreRule =\n  (options: Required<MarkdownItIncludeOptions>): RuleCore =>\n  (state): void => {\n    const env = <IncludeEnv>state.env;\n    const includedFiles = env.includedFiles || (env.includedFiles = []);\n    const currentPath = options.getCurrentPath(env);\n\n    state.src = resolveInclude(state.src, options, {\n      cwd: currentPath ? path.dirname(currentPath) : null,\n      includedFiles,\n    });\n  };\n\nconst SYNTAX_PUSH_RE = /^@include-push\\(([^)]*?)\\)$/;\nconst SYNTAX_POP_RE = /^@include-pop\\(\\)$/;\n\nconst includePushRule: RuleBlock = (state, startLine, _, silent): boolean => {\n  const pos = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  const content = state.src.slice(pos, max);\n  let result: boolean = content.startsWith(\"@include-push\");\n\n  if (result) {\n    // check if it’s matched the syntax\n    const match = content.match(SYNTAX_PUSH_RE);\n\n    if (match) {\n      if (silent) return true;\n\n      const [, includePath] = match;\n\n      state.line = startLine + 1;\n      const token = state.push(\"include_push\", \"\", 0);\n\n      token.map = [startLine, state.line];\n      token.info = includePath;\n      token.markup = \"include_push\";\n    } else {\n      result = false;\n    }\n  }\n\n  return result;\n};\n\nconst includePopRule: RuleBlock = (state, startLine, _, silent): boolean => {\n  const pos = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  const content = state.src.slice(pos, max);\n  let result: boolean = content.startsWith(\"@include-pop\");\n\n  if (result) {\n    const match = content.match(SYNTAX_POP_RE);\n\n    if (match) {\n      if (silent) return true;\n\n      state.line = startLine + 1;\n\n      const token = state.push(\"include_pop\", \"\", 0);\n\n      token.map = [startLine, state.line];\n      token.markup = \"include_pop\";\n    } else result = false;\n  }\n\n  return result;\n};\n\nconst resolveRelatedLink = (\n  attr: string,\n  token: Token,\n  filePath: string,\n  includedPaths?: string[]\n): void => {\n  const attrIndex = token.attrIndex(attr);\n  const url = token.attrs?.[attrIndex][1];\n\n  if (url?.startsWith(\".\") && Array.isArray(includedPaths)) {\n    const { length } = includedPaths;\n\n    if (length) {\n      const includeDir = path.relative(\n        path.dirname(filePath),\n        includedPaths[length - 1]\n      );\n\n      token.attrs![attrIndex][1] = `.${path.sep}${path.join(includeDir, url)}`;\n    }\n  }\n};\n\nexport const include: PluginWithOptions<MarkdownItIncludeOptions> = (\n  md,\n  options\n): void => {\n  const {\n    getCurrentPath,\n    getPath = (path: string): string => path,\n    deep = false,\n    resolveLinkPath = true,\n    resolveImagePath = true,\n  } = options || {};\n\n  if (typeof getCurrentPath !== \"function\")\n    return console.error(\n      '[@mdit/plugin-include]: \"getCurrentPath\" is required'\n    );\n\n  // add md_import core rule\n  md.core.ruler.after(\n    \"normalize\",\n    \"md_import\",\n    createIncludeCoreRule({\n      getCurrentPath,\n      getPath,\n      deep,\n      resolveLinkPath,\n      resolveImagePath,\n    })\n  );\n\n  if (resolveImagePath || resolveLinkPath) {\n    md.block.ruler.before(\"table\", \"md_include_push\", includePushRule, {\n      alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n    });\n    md.block.ruler.before(\"table\", \"md_include_pop\", includePopRule, {\n      alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n    });\n\n    md.renderer.rules[\"include_push\"] = (\n      tokens,\n      index,\n      _options,\n      env: IncludeEnv\n    ): string => {\n      const token = tokens[index];\n      const includedPaths = (env.includedPaths ??= []);\n\n      includedPaths.push(token.info);\n\n      return \"\";\n    };\n\n    md.renderer.rules[\"include_pop\"] = (\n      _tokens,\n      _index,\n      _options,\n      env: IncludeEnv\n    ): string => {\n      const includedPaths = env.includedPaths;\n\n      if (Array.isArray(includedPaths)) includedPaths.pop();\n      else\n        console.error(\n          `[@mdit/plugin-include]: include_pop failed, no include_push.`\n        );\n\n      return \"\";\n    };\n\n    if (resolveImagePath) {\n      const defaultImageRenderer = md.renderer.rules.image!;\n\n      md.renderer.rules.image = (\n        tokens,\n        index,\n        options,\n        env: IncludeEnv,\n        self\n      ): string => {\n        const token = tokens[index];\n        const currentPath = getCurrentPath(env);\n\n        if (currentPath)\n          resolveRelatedLink(\"src\", token, currentPath, env.includedPaths);\n\n        // pass token to default renderer.\n        return defaultImageRenderer(tokens, index, options, env, self);\n      };\n    }\n\n    if (resolveLinkPath) {\n      const defaultLinkRenderer =\n        md.renderer.rules[\"link_open\"] ||\n        ((tokens, index, options, _env, self): string =>\n          self.renderToken(tokens, index, options));\n\n      md.renderer.rules[\"link_open\"] = (\n        tokens,\n        index,\n        options,\n        env: IncludeEnv,\n        self\n      ): string => {\n        const token = tokens[index];\n        const currentPath = getCurrentPath(env);\n\n        if (currentPath)\n          resolveRelatedLink(\"href\", token, currentPath, env.includedPaths);\n\n        // pass token to default renderer.\n        return defaultLinkRenderer(tokens, index, options, env, self);\n      };\n    }\n  }\n};\n"],"names":["NEWLINES_RE","INDENT_RE","REGIONS_RE","INCLUDE_RE","dedent","text","match","minIndentLength","indentation","content","indentLength","testLine","line","regexp","regionName","end","full","tag","name","findRegion","lines","lineStart","lineId","reg","handleInclude","info","cwd","includedFiles","resolvedPath","filePath","realPath","path","fs","results","region","lineEnd","dirName","resolveInclude","options","result","includePath","actualPath","createIncludeCoreRule","state","env","currentPath","SYNTAX_PUSH_RE","SYNTAX_POP_RE","includePushRule","startLine","_","silent","pos","max","token","includePopRule","resolveRelatedLink","attr","includedPaths","_a","attrIndex","url","length","includeDir","include","md","getCurrentPath","getPath","deep","resolveLinkPath","resolveImagePath","tokens","index","_options","_tokens","_index","defaultImageRenderer","self","defaultLinkRenderer","_env"],"mappings":"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"}