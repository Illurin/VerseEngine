{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/plugin.ts"],"sourcesContent":["import type Token from \"markdown-it/lib/token.js\";\n\nexport const setTokenAttr = (\n  token: Token,\n  name: string,\n  value: string\n): void => {\n  const index = token.attrIndex(name);\n  const attr: [string, string] = [name, value];\n\n  if (index < 0) token.attrPush(attr);\n  else token.attrs![index] = attr;\n};\n\nexport const getParentTokenIndex = (tokens: Token[], index: number): number => {\n  const targetLevel = tokens[index].level - 1;\n\n  for (let i = index - 1; i >= 0; i--)\n    if (tokens[i].level === targetLevel) return i;\n\n  return -1;\n};\n\nexport const isInlineToken = (token?: Token): boolean =>\n  token?.type === \"inline\";\n\nexport const isParagraphToken = (token?: Token): boolean =>\n  token?.type === \"paragraph_open\";\n\nexport const isListItemToken = (token?: Token): boolean =>\n  token?.type === \"list_item_open\";\n","/**\n * Forked from https://github.com/linsir/markdown-it-task-checkbox/blob/master/index.js\n */\n\nimport Token from \"markdown-it/lib/token.js\";\nimport {\n  getParentTokenIndex,\n  isInlineToken,\n  isParagraphToken,\n  isListItemToken,\n  setTokenAttr,\n} from \"./utils.js\";\n\nimport type { PluginWithOptions } from \"markdown-it\";\nimport type StateCore from \"markdown-it/lib/rules_core/state_core.js\";\nimport type { MarkdownItTaskListOptions } from \"./options.js\";\nimport type { TaskListEnv } from \"./types.js\";\n\ninterface TaskListStateCore extends StateCore {\n  env: TaskListEnv;\n}\n// The leading whitespace in a list item (token.content) is already trimmed off by markdown-it.\n// The regex below checks for '[ ] ' or '[x] ' or '[X] ' at the start of the string token.content,\n// where the space is either a normal space or a non-breaking space (character 160 = \\u00A0).\nconst startsWithTodoMarkdown = (token: Token): boolean =>\n  /^\\[[xX \\u00A0]\\][ \\u00A0]/.test(token.content);\n\nconst isTaskListItem = (tokens: Token[], index: number): boolean =>\n  isInlineToken(tokens[index]) &&\n  isParagraphToken(tokens[index - 1]) &&\n  isListItemToken(tokens[index - 2]) &&\n  startsWithTodoMarkdown(tokens[index]);\n\nconst generateCheckbox = (token: Token, id: string, disabled = true): Token => {\n  const checkbox = new Token(\"checkbox_input\", \"input\", 0);\n\n  checkbox.attrs = [\n    [\"type\", \"checkbox\"],\n    [\"class\", \"task-list-item-checkbox\"],\n    [\"id\", id],\n  ];\n\n  // if token.content starts with '[x] ' or '[X] '\n  if (/^\\[[xX]\\][ \\u00A0]/.test(token.content))\n    checkbox.attrs.push([\"checked\", \"checked\"]);\n\n  if (disabled) checkbox.attrs.push([\"disabled\", \"disabled\"]);\n\n  return checkbox;\n};\n\nconst beginLabel = (id: string): Token => {\n  const label = new Token(\"label_open\", \"label\", 1);\n\n  label.attrs = [\n    [\"class\", \"task-list-item-label\"],\n    [\"for\", id],\n  ];\n\n  return label;\n};\n\nconst endLabel = (): Token => new Token(\"label_close\", \"label\", -1);\n\nconst addCheckBox = (\n  token: Token,\n  state: TaskListStateCore,\n  options: Required<MarkdownItTaskListOptions>\n): void => {\n  const id = `task-item-${state.env.tasklists++}`;\n\n  token.children = token.children || [];\n\n  // remove the checkbox syntax letter\n  token.children[0].content = token.children[0].content.slice(3);\n\n  if (options.label) {\n    // add label\n    token.children.unshift(beginLabel(id));\n    token.children.push(endLabel());\n  }\n  // checkbox\n  token.children.unshift(generateCheckbox(token, id, options.disabled));\n};\n\nexport const tasklist: PluginWithOptions<MarkdownItTaskListOptions> = (\n  md,\n  { disabled = true, label = true } = {}\n) => {\n  md.core.ruler.after(\n    \"inline\",\n    \"github-task-lists\",\n    (state: TaskListStateCore) => {\n      const tokens = state.tokens;\n\n      if (!state.env.tasklists) state.env.tasklists = 0;\n\n      for (let i = 2; i < tokens.length; i++) {\n        if (isTaskListItem(tokens, i)) {\n          addCheckBox(tokens[i], state, { disabled, label });\n          setTokenAttr(tokens[i - 2], \"class\", \"task-list-item\");\n          setTokenAttr(\n            tokens[getParentTokenIndex(tokens, i - 2)],\n            \"class\",\n            \"task-list-container\"\n          );\n        }\n      }\n\n      return true;\n    }\n  );\n};\n"],"names":["setTokenAttr","token","name","value","index","attr","getParentTokenIndex","tokens","targetLevel","i","isInlineToken","isParagraphToken","isListItemToken","startsWithTodoMarkdown","isTaskListItem","generateCheckbox","id","disabled","checkbox","Token","beginLabel","label","endLabel","addCheckBox","state","options","tasklist","md"],"mappings":"wCAEO,MAAMA,EAAe,CAC1BC,EACAC,EACAC,IACS,CACT,MAAMC,EAAQH,EAAM,UAAUC,CAAI,EAC5BG,EAAyB,CAACH,EAAMC,CAAK,EAEvCC,EAAQ,EAAGH,EAAM,SAASI,CAAI,EAC7BJ,EAAM,MAAOG,GAASC,CAC7B,EAEaC,EAAsB,CAACC,EAAiBH,IAA0B,CAC7E,MAAMI,EAAcD,EAAOH,GAAO,MAAQ,EAE1C,QAASK,EAAIL,EAAQ,EAAGK,GAAK,EAAGA,IAC9B,GAAIF,EAAOE,GAAG,QAAUD,EAAa,OAAOC,EAE9C,MAAO,EACT,EAEaC,EAAiBT,IAC5BA,GAAA,YAAAA,EAAO,QAAS,SAELU,EAAoBV,IAC/BA,GAAA,KAAA,OAAAA,EAAO,QAAS,iBAELW,EAAmBX,IAC9BA,GAAA,KAAA,OAAAA,EAAO,QAAS,iBCNZY,EAA0BZ,GAC9B,4BAA4B,KAAKA,EAAM,OAAO,EAE1Ca,EAAiB,CAACP,EAAiBH,IACvCM,EAAcH,EAAOH,EAAM,GAC3BO,EAAiBJ,EAAOH,EAAQ,EAAE,GAClCQ,EAAgBL,EAAOH,EAAQ,EAAE,GACjCS,EAAuBN,EAAOH,EAAM,EAEhCW,EAAmB,CAACd,EAAce,EAAYC,EAAW,KAAgB,CAC7E,MAAMC,EAAW,IAAIC,EAAM,iBAAkB,QAAS,CAAC,EAEvD,OAAAD,EAAS,MAAQ,CACf,CAAC,OAAQ,UAAU,EACnB,CAAC,QAAS,yBAAyB,EACnC,CAAC,KAAMF,CAAE,CACX,EAGI,qBAAqB,KAAKf,EAAM,OAAO,GACzCiB,EAAS,MAAM,KAAK,CAAC,UAAW,SAAS,CAAC,EAExCD,GAAUC,EAAS,MAAM,KAAK,CAAC,WAAY,UAAU,CAAC,EAEnDA,CACT,EAEME,EAAcJ,GAAsB,CACxC,MAAMK,EAAQ,IAAIF,EAAM,aAAc,QAAS,CAAC,EAEhD,OAAAE,EAAM,MAAQ,CACZ,CAAC,QAAS,sBAAsB,EAChC,CAAC,MAAOL,CAAE,CACZ,EAEOK,CACT,EAEMC,EAAW,IAAa,IAAIH,EAAM,cAAe,QAAS,EAAE,EAE5DI,EAAc,CAClBtB,EACAuB,EACAC,IACS,CACT,MAAMT,EAAK,aAAaQ,EAAM,IAAI,cAElCvB,EAAM,SAAWA,EAAM,UAAY,CAAA,EAGnCA,EAAM,SAAS,GAAG,QAAUA,EAAM,SAAS,GAAG,QAAQ,MAAM,CAAC,EAEzDwB,EAAQ,QAEVxB,EAAM,SAAS,QAAQmB,EAAWJ,CAAE,CAAC,EACrCf,EAAM,SAAS,KAAKqB,EAAU,CAAA,GAGhCrB,EAAM,SAAS,QAAQc,EAAiBd,EAAOe,EAAIS,EAAQ,QAAQ,CAAC,CACtE,EAEaC,EAAyD,CACpEC,EACA,CAAE,SAAAV,EAAW,GAAM,MAAAI,EAAQ,EAAK,EAAI,CAAA,IACjC,CACHM,EAAG,KAAK,MAAM,MACZ,SACA,oBACCH,GAA6B,CAC5B,MAAMjB,EAASiB,EAAM,OAEhBA,EAAM,IAAI,YAAWA,EAAM,IAAI,UAAY,GAEhD,QAASf,EAAI,EAAGA,EAAIF,EAAO,OAAQE,IAC7BK,EAAeP,EAAQE,CAAC,IAC1Bc,EAAYhB,EAAOE,GAAIe,EAAO,CAAE,SAAAP,EAAU,MAAAI,CAAM,CAAC,EACjDrB,EAAaO,EAAOE,EAAI,GAAI,QAAS,gBAAgB,EACrDT,EACEO,EAAOD,EAAoBC,EAAQE,EAAI,CAAC,GACxC,QACA,qBACF,GAIJ,MAAO,EACT,CACF,CACF"}