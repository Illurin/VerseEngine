import{getDirname as D,path as $,fs as O}from"@vuepress/utils";import{watch as b}from"chokidar";import{mergeViteConfig as T,Logger as A}from"vuepress-shared/node";const E=(t,s,e)=>{var i,l,f;const{bundler:p}=s.options;if(p.name.endsWith("vite")){const n=t,o=(f=(l=(i=n.viteOptions)==null?void 0:i.css)==null?void 0:l.preprocessorOptions)==null?void 0:f.scss.additionalData;n.viteOptions=T(n.viteOptions||{},{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(u,r)=>{const c=typeof o=="string"?`${o}${u}`:typeof o=="function"?await o(u,r):u;return c.match(new RegExp(`@use\\s+["']@sass-palette\\/${e}-config["'];`))?c:`@use "@sass-palette/${e}-config";
${c}`}}}}})}if(p.name.endsWith("webpack")){const n=t;n.scss||(n.scss={});const{additionalData:o}=n.scss,u=(r,c)=>{const a=typeof o=="string"?`${o}${r}`:typeof o=="function"?o(r,c):r;return a.match(new RegExp(`@use\\s+["']@sass-palette\\/${e}-config["'];`))?a:`@use "@sass-palette/${e}-config";
${a}`};n.scss.additionalData=u}},F=D(import.meta.url),W=$.resolve(F,"../../styles/empty.scss"),m=new A("vuepress-plugin-sass-palette"),d=t=>O.pathExistsSync(t)?t:W,R=(t,s)=>t.writeTemp(`sass-palette/load-${s}.js`,`import "@sass-palette/${s}-inject";
export default {};
`),z=(t,s)=>t.writeTemp(`sass-palette/${s}-inject.scss`,`@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

@use "@sass-palette/helper";
@use "@sass-palette/${s}-palette";

$variables: meta.module-variables("${s}-palette");
${t.env.isDebug?`
@debug "${s} palette variables: #{meta.inspect($variables)}";
@debug "${s} config variables: #{meta.inspect(meta.module-variables("${s}-config"))}";
`:""}

@each $name, $value in $variables {
  $key: helper.camel-to-kebab($name);

  @if meta.type-of($value) == number or meta.type-of($value) == string {
    :root {
      #{$key}: #{$value};
    }
  } @else if helper.color-is-legal($value) {
    @if meta.global-variable-exists("dark-selector", $module: "${s}-config") {
      @include helper.inject-color($key, $value, $dark-selector: ${s}-config.$dark-selector);
    } @else {
      @include helper.inject-color($key, $value);
    }
  }
}
`),w=(t,{id:s,defaultConfig:e,defaultPalette:i,generator:l,userConfig:f,userPalette:p})=>t.writeTemp(`sass-palette/${s}-config.scss`,`@import "file:///${d(i)}";
@import "file:///${d(e)}";
@import "file:///${d(p)}";
@import "file:///${d(f)}";
@import "file:///${d(l)}";
`),j=(t,{id:s,defaultPalette:e,generator:i,userPalette:l})=>t.writeTemp(`sass-palette/${s}-palette.scss`,`@import "file:///${d(e)}";
@import "file:///${d(l)}";
@import "file:///${d(i)}";
`),x=(t,{id:s,userStyle:e})=>e?t.writeTemp(`sass-palette/${s}-style.scss`,`@forward "file:///${d(e)}";
`):Promise.resolve(null),v=D(import.meta.url),I=t=>s=>{s.env.isDebug&&m.info("Options:",t);const{id:e="hope",config:i=`.vuepress/styles/${e}-config.scss`,defaultConfig:l=$.resolve(v,"../../styles/default/config.scss"),palette:f=`.vuepress/styles/${e}-palette.scss`,defaultPalette:p=$.resolve(v,"../../styles/default/palette.scss"),generator:n=$.resolve(v,"../../styles/empty.scss"),style:o=""}=t,u=s.dir.source(i),r=s.dir.source(f),c=o?s.dir.source(o):null;return{name:"vuepress-plugin-sass-palette",multiple:!0,id:e,alias:{["@sass-palette/helper"]:$.resolve(v,"../../styles/helper.scss"),[`@sass-palette/${e}-config`]:s.dir.temp(`sass-palette/${e}-config.scss`),[`@sass-palette/${e}-inject`]:s.dir.temp(`sass-palette/${e}-inject.scss`),[`@sass-palette/${e}-palette`]:s.dir.temp(`sass-palette/${e}-palette.scss`),...o?{[`@sass-palette/${e}-style`]:s.dir.temp(`sass-palette/${e}-style.scss`)}:{}},extendsBundlerOptions:(a,g)=>{E(a,g,e)},onInitialized:()=>Promise.all([z(s,e),w(s,{id:e,defaultConfig:l,defaultPalette:p,generator:n,userConfig:u,userPalette:r}),j(s,{id:e,defaultPalette:p,generator:n,userPalette:r}),x(s,{id:e,userStyle:c})]).then(()=>{s.env.isDebug&&m.info(`Style file for ${e} generated`)}),onWatched:(a,g)=>{const y=b(u,{cwd:a.dir.source(),ignoreInitial:!0}),C=()=>w(a,{id:e,defaultConfig:l,defaultPalette:p,generator:n,userConfig:u,userPalette:r}).then(()=>{a.env.isDebug&&m.info(`Style file for ${e} updated`)});y.on("add",()=>{C()}),y.on("unlink",()=>{C()}),g.push(y);const h=b(r,{cwd:a.dir.source(),ignoreInitial:!0}),S=()=>Promise.all([w(a,{id:e,defaultConfig:l,defaultPalette:p,generator:n,userConfig:u,userPalette:r}),j(a,{id:e,defaultPalette:p,generator:n,userPalette:r})]).then(()=>{a.env.isDebug&&m.info(`Style file for ${e} updated`)});if(h.on("add",()=>{S()}),h.on("unlink",()=>{S()}),g.push(h),c){const P=b(c,{cwd:a.dir.source(),ignoreInitial:!0}),k=()=>x(a,{id:e,userStyle:c}).then(()=>{a.env.isDebug&&m.info(`Style file for ${e} updated`)});P.on("add",()=>{k()}),P.on("unlink",()=>{k()}),g.push(P)}},clientConfigFile:a=>R(a,e)}},B=(t,s)=>{const{plugins:e}=t.pluginApi;e.filter(i=>i.name==="vuepress-plugin-sass-palette").every(i=>i.id!==s.id)&&t.use(I(s))},L=(t,s)=>{const{plugins:e}=t.pluginApi,i=e.filter(l=>l.name==="vuepress-plugin-sass-palette").findIndex(l=>l.id===s);i!==-1&&t.pluginApi.plugins.splice(i,1)};export{L as removePalettePlugin,I as sassPalettePlugin,B as useSassPalettePlugin};
//# sourceMappingURL=index.js.map
