import { FunctionalComponent, ComputedRef } from 'vue';
import { LocaleData as LocaleData$1 } from '@vuepress/shared';
import { PageFrontmatter, LocaleData } from '@vuepress/core';
import * as vue_router from 'vue-router';
import { RouteLocationNormalizedLoaded, Router } from 'vue-router';
import { DeflateOptions } from 'fflate';

interface IconBaseProps {
    name?: string;
    color?: string;
}
/**
 * Icon Base Component
 */
declare const IconBase: FunctionalComponent<IconBaseProps>;

declare const RenderDefault: FunctionalComponent;

declare const hasGlobalComponent: (name: string) => boolean;

interface DateDetail {
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
}
interface DateInfo {
    type: "date" | "time" | "full";
    info: DateDetail;
    value: Date | undefined;
}
/**
 * Get Date info
 *
 * @description The function returns null instead of throw error when the date is invalid
 *
 * 获取日期信息
 *
 * @description 当日期无效时，函数返回 null 而不是抛出错误
 *
 * @param date Date or date info
 * @param timezone (optional) date timezone
 */
declare const getDate: (date: string | Date | undefined, timezone?: string) => DateInfo | null;
/**
 * Recent date will returns positive value, so dates will be latest to oldest after sorting
 *
 * @description Invalid date will appear at last
 *
 * 最近的日期将返回正值，因此在排序后日期将是最新到最旧
 *
 * @description 无效日期将出现在最后
 */
declare const compareDate: (dateA: Date | number | string | undefined, dateB: Date | number | string | undefined) => number;

type IAnyObject = Record<string, any>;
/** Deep merge objects to the first one */
declare const deepMerge: <T extends IAnyObject, U extends IAnyObject = T, V extends Partial<T> & Partial<U> = T & U>(originObject: T, ...overrideObjects: U[]) => V;

type AuthorName = string;
interface AuthorInfo {
    /**
     * Author name
     *
     * 作者姓名
     */
    name: string;
    /**
     * Author website
     *
     * 作者网站
     */
    url?: string;
    /**
     * Author email
     *
     * 作者 Email
     */
    email?: string;
}
type Author = AuthorName | AuthorName[] | AuthorInfo | AuthorInfo[];

interface BasePageFrontMatter extends PageFrontmatter {
    /**
     * Page icon
     *
     * 页面图标
     */
    icon?: string;
    /**
     * Page Author(s)
     *
     * 页面作者
     */
    author?: Author | false;
    /**
     * Writing Date
     *
     * 写作日期
     */
    date?: Date;
    /**
     * Page Category(ies)
     *
     * 页面分类
     */
    category?: string | string[];
    /**
     * Page Tag(s)
     *
     * 页面标签
     */
    tag?: string[] | string;
    /**
     * Whether the content is original
     *
     * 是否原创
     */
    isOriginal?: boolean;
    /**
     * Whether the page is an article
     *
     * 页面是否是文章
     */
    article?: boolean;
    /**
     * Page Cover
     *
     * 页面封面
     */
    cover?: string;
    /**
     * Page Banner
     *
     * 页面 Banner 图
     */
    banner?: string;
    /**
     * Footer text
     *
     * 页脚文字
     */
    footer?: string | boolean;
    /**
     * Copyright text
     *
     * 版权文字
     */
    copyright?: string | false;
    /**
     * Whether is home page
     *
     * 是否是主页
     */
    home?: boolean;
    /**
     * @deprecated use `date` instead
     */
    time?: Date | string;
    /**
     * @deprecated use `category` instead
     */
    categories?: string[];
    /**
     * @deprecated use `tag` instead
     */
    tags?: string[];
}

type RequiredLocaleConfig<T extends LocaleData = LocaleData> = Record<string, T>;

declare const getAuthor: (author: Author | false | undefined, canDisable?: boolean) => AuthorInfo[];
declare const getStringArray: (value: string[] | string | undefined, optionName?: string) => string[];
declare const getCategory: (category: string[] | string | undefined) => string[];
declare const getTag: (tag: string[] | string | undefined) => string[];

/**
 * check if a variable is a valid url
 */
declare const isUrl: (test: unknown) => boolean;
/**
 * Whether a variable is a valid absolute url
 */
declare const isAbsoluteUrl: (test: unknown) => boolean;

/**
 * Get current locale config
 *
 * @param localesConfig client locale Config
 * @returns current locale config
 */
declare const useLocaleConfig: <T extends LocaleData$1>(localesConfig: RequiredLocaleConfig<T>) => ComputedRef<T>;

type PageTitleRef = ComputedRef<string>;
declare const usePageTitle: () => PageTitleRef;

declare const checkIsMobile: (ua: string) => boolean;
declare const checkIsChromeWebView: (ua: string) => boolean;
declare const checkIsSafariMobile: (ua: string) => boolean;
declare const checkIsSafari: (ua: string) => boolean;
declare const checkIsiPhone: (ua: string) => boolean;
declare const checkIsiPad: (ua: string) => boolean;
declare const checkIsWindows: (ua: string) => boolean;
declare const checkIsIOS: (ua: string) => boolean;
declare const checkIsMacOS: (ua: string) => boolean;

declare const generateIndexFromHash: (content: string, total: number) => number;

/**
 * Forked and edited from https://github.com/vxhly/vuepress-plugin-one-click-copy/blob/master/bin/Message.js
 *
 * MIT License
 *
 * Copyright (c) 2019 vxhly <pengchengou@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * © 2019 GitHub, Inc.
 */
declare class Message {
    private containerElement;
    private messageElements;
    constructor();
    pop(html: string, duration?: number): number;
    close(messageId?: number): void;
    destroy(): void;
}

/**
 * Get hash from path
 *
 * @param path link path
 * @returns hash
 */
declare const getHash: (path: string) => string;
declare const normalizePath: (path: string) => string;
/**
 * Whether the lick is active
 *
 * @param route Current route
 * @param link link path
 * @returns Whether the lick is active
 */
declare const isActiveLink: (route: RouteLocationNormalizedLoaded, link?: string) => boolean;

declare const utoa: (data: string, level?: DeflateOptions["level"]) => string;
declare const atou: (base64: string) => string;

/**
 * Resolve a route with redirection
 */
declare const resolveRouteWithRedirect: (router: Router, to: vue_router.RouteLocationRaw, currentLocation?: vue_router.RouteLocationNormalizedLoaded | undefined) => ReturnType<Router["resolve"]>;

export { Author, AuthorInfo, AuthorName, BasePageFrontMatter, DateDetail, DateInfo, IconBase, Message, PageTitleRef, RenderDefault, RequiredLocaleConfig, atou, checkIsChromeWebView, checkIsIOS, checkIsMacOS, checkIsMobile, checkIsSafari, checkIsSafariMobile, checkIsWindows, checkIsiPad, checkIsiPhone, compareDate, deepMerge, generateIndexFromHash, getAuthor, getCategory, getDate, getHash, getStringArray, getTag, hasGlobalComponent, isAbsoluteUrl, isActiveLink, isUrl, normalizePath, resolveRouteWithRedirect, useLocaleConfig, usePageTitle, utoa };
