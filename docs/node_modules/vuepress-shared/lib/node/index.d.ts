import { App, PageFrontmatter, LocaleData, LocaleConfig, Page } from '@vuepress/core';
import { IncomingMessage, ServerResponse } from 'node:http';
import { WebpackChainConfig } from '@vuepress/bundler-webpack';
import { LocaleData as LocaleData$1 } from '@vuepress/shared';
export { default as stripTags } from 'striptags';
import { GitPluginPageData } from '@vuepress/plugin-git';
import { Ora } from 'ora';
import { DeflateOptions } from 'fflate';

declare const tagHint: (tag: string, isDebug?: boolean) => void;
interface CustomElementCommonOptions {
    /**
     * VuePress Node App
     */
    app: App;
    /**
     * VuePress Bundler config
     */
    config: unknown;
}
/**
 * Add tags as customElement
 *
 * @param config VuePress Bundler config
 * @param app VuePress Node App
 * @param customElements tags recognized as custom element
 */
declare const addCustomElement: ({ app, config }: CustomElementCommonOptions, customElement: string[] | string | RegExp) => void;

interface CustomServerCommonOptions {
    /**
     * VuePress Node App
     */
    app: App;
    /**
     * VuePress Bundler config
     */
    config: unknown;
}
interface CustomServerOptions {
    /**
     * Path to be responded
     */
    path: string;
    /**
     * Respond function
     */
    response: (request: IncomingMessage, response: ServerResponse) => Promise<string | Buffer>;
    /**
     * error msg
     */
    errMsg?: string;
}
/**
 * Handle specific path when running VuePress Dev Server
 *
 * @param config VuePress Bundler config
 * @param app VuePress Node App
 * @param path Path to be responded
 * @param response respond function
 * @param errMsg error msg
 */
declare const useCustomDevServer: ({ app, config }: CustomServerCommonOptions, { errMsg, response: responseHandler, path, }: CustomServerOptions) => void;

declare const getBundlerName: ({ options: { bundler: { name }, }, }: App) => string;

/**
Types from https://github.com/rollup/plugins/blob/master/packages/alias/types/index.d.ts
Inlined because the plugin is bundled.
https://github.com/rollup/plugins/blob/master/LICENSE
The MIT License (MIT)
Copyright (c) 2019 RollupJS Plugin Contributors (https://github.com/rollup/plugins/graphs/contributors)
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Code from https://github.com/vitejs/vite
Inlined because vite is optional
https://github.com/vitejs/vite/blob/main/LICENSE

MIT License

Copyright (c) 2019-present, Yuxi (Evan) You and Vite contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
interface Alias {
    find: string | RegExp;
    replacement: string;
    /**
     * Instructs the plugin to use an alternative resolving algorithm,
     * rather than the Rollup's resolver.
     * @default null
     */
    customResolver?: ResolverFunction | ResolverObject | null;
}
type ResolverFunction = (...args: unknown[]) => unknown;
interface ResolverObject {
    buildStart?: (...args: unknown[]) => unknown;
    resolveId: ResolverFunction;
}
type AliasOptions = readonly Alias[] | {
    [find: string]: string;
};
declare const mergeAlias: (defaults?: AliasOptions, overrides?: AliasOptions) => AliasOptions | undefined;
declare const mergeViteConfig: (defaults: Record<string, any>, overrides: Record<string, any>, isRoot?: boolean) => Record<string, any>;

interface ViteCommonOptions {
    /**
     * VuePress Node App
     */
    app: App;
    /**
     * VuePress Bundler config
     */
    config: unknown;
}
/**
 * Add modules to Vite `optimizeDeps.include` list
 */
declare const addViteOptimizeDepsInclude: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;
/**
 * Add modules to Vite `optimizeDeps.exclude` list
 */
declare const addViteOptimizeDepsExclude: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;
/**
 * Add modules to Vite `ssr.external` list
 */
declare const addViteSsrExternal: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;
/**
 * Add modules to Vite `ssr.noExternal` list
 */
declare const addViteSsrNoExternal: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;

interface WebpackCommonOptions {
    /**
     * VuePress Node App
     */
    app: App;
    /**
     * VuePress Bundler config
     */
    config: unknown;
}
declare const chainWebpack: ({ app, config }: WebpackCommonOptions, chainWebpack: (config: WebpackChainConfig, isServer: boolean, isBuild: boolean) => void) => void;

declare const lang2PathConfig: {
    "de-AT": string;
    "en-US": string;
    "es-ES": string;
    "fr-FR": string;
    "ja-JP": string;
    "ko-KR": string;
    "pl-PL": string;
    "pt-BR": string;
    "ru-RU": string;
    "sk-SK": string;
    "tr-TR": string;
    "uk-UA": string;
    "vi-VN": string;
    "zh-CN": string;
    "zh-TW": string;
};

/** Types for supported lang codes */
type HopeLang = keyof typeof lang2PathConfig;

interface DateDetail {
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
}
interface DateInfo {
    type: "date" | "time" | "full";
    info: DateDetail;
    value: Date | undefined;
}
/**
 * Get Date info
 *
 * @description The function returns null instead of throw error when the date is invalid
 *
 * 获取日期信息
 *
 * @description 当日期无效时，函数返回 null 而不是抛出错误
 *
 * @param date Date or date info
 * @param timezone (optional) date timezone
 */
declare const getDate: (date: string | Date | undefined, timezone?: string) => DateInfo | null;
/**
 * Recent date will returns positive value, so dates will be latest to oldest after sorting
 *
 * @description Invalid date will appear at last
 *
 * 最近的日期将返回正值，因此在排序后日期将是最新到最旧
 *
 * @description 无效日期将出现在最后
 */
declare const compareDate: (dateA: Date | number | string | undefined, dateB: Date | number | string | undefined) => number;

type IAnyObject = Record<string, any>;
/** Deep merge objects to the first one */
declare const deepMerge: <T extends IAnyObject, U extends IAnyObject = T, V extends Partial<T> & Partial<U> = T & U>(originObject: T, ...overrideObjects: U[]) => V;

type AuthorName = string;
interface AuthorInfo {
    /**
     * Author name
     *
     * 作者姓名
     */
    name: string;
    /**
     * Author website
     *
     * 作者网站
     */
    url?: string;
    /**
     * Author email
     *
     * 作者 Email
     */
    email?: string;
}
type Author = AuthorName | AuthorName[] | AuthorInfo | AuthorInfo[];

interface BasePageFrontMatter extends PageFrontmatter {
    /**
     * Page icon
     *
     * 页面图标
     */
    icon?: string;
    /**
     * Page Author(s)
     *
     * 页面作者
     */
    author?: Author | false;
    /**
     * Writing Date
     *
     * 写作日期
     */
    date?: Date;
    /**
     * Page Category(ies)
     *
     * 页面分类
     */
    category?: string | string[];
    /**
     * Page Tag(s)
     *
     * 页面标签
     */
    tag?: string[] | string;
    /**
     * Whether the content is original
     *
     * 是否原创
     */
    isOriginal?: boolean;
    /**
     * Whether the page is an article
     *
     * 页面是否是文章
     */
    article?: boolean;
    /**
     * Page Cover
     *
     * 页面封面
     */
    cover?: string;
    /**
     * Page Banner
     *
     * 页面 Banner 图
     */
    banner?: string;
    /**
     * Footer text
     *
     * 页脚文字
     */
    footer?: string | boolean;
    /**
     * Copyright text
     *
     * 版权文字
     */
    copyright?: string | false;
    /**
     * Whether is home page
     *
     * 是否是主页
     */
    home?: boolean;
    /**
     * @deprecated use `date` instead
     */
    time?: Date | string;
    /**
     * @deprecated use `category` instead
     */
    categories?: string[];
    /**
     * @deprecated use `tag` instead
     */
    tags?: string[];
}

type RequiredLocaleConfig<T extends LocaleData = LocaleData> = Record<string, T>;

declare const getAuthor: (author: Author | false | undefined, canDisable?: boolean) => AuthorInfo[];
declare const getStringArray: (value: string[] | string | undefined, optionName?: string) => string[];
declare const getCategory: (category: string[] | string | undefined) => string[];
declare const getTag: (tag: string[] | string | undefined) => string[];

/**
 * check if a variable is a valid url
 */
declare const isUrl: (test: unknown) => boolean;
/**
 * Whether a variable is a valid absolute url
 */
declare const isAbsoluteUrl: (test: unknown) => boolean;

/** Get language from path */
declare const path2Lang: (path?: string, debug?: boolean) => HopeLang;
/** Get path from language */
declare const lang2Path: (lang?: string, debug?: boolean) => string;
/**
 * Get language of root directory
 *
 * @param app VuePress Node App
 * @returns root language
 */
declare const getRootLang: (app: App) => string;
/**
 * Get the infer language path from root directory language
 *
 * @param app VuePress Node App
 * @returns infer language
 */
declare const getRootLangPath: (app: App) => string;
declare const getLocalePaths: (app: App) => string[];
interface GetLocalesOptions<T extends LocaleData$1> {
    app: App;
    default: RequiredLocaleConfig<T>;
    config?: LocaleConfig<T> | undefined;
    name?: string;
}
/**
 * Get final locale config to passed to client
 *
 * @param app  VuePress Node App
 * @param defaultLocalesConfig default locale config
 * @param userLocalesConfig user locale config
 * @returns final locale config
 */
declare const getLocales: <T extends LocaleData$1>({ app, name, default: defaultLocalesConfig, config: userLocalesConfig, }: GetLocalesOptions<T>) => RequiredLocaleConfig<T>;

interface PageExcerptOptions {
    /**
     * Excerpt separator
     *
     * 摘要分隔符
     *
     * @default '<!-- more -->'
     */
    excerptSeparator?: string;
    /**
     * Length of excerpt
     *
     * @description Excerpt length will be the minimal possible length reaching this value
     *
     * 摘要的长度
     *
     * @description 摘要的长度会尽可能的接近这个值
     *
     * @default 300
     */
    excerptLength?: number;
    /**
     * Tags which is considered as custom elements
     *
     * @description This is used to determine whether a tag is a custom element since all vue components are removed in excerpt
     *
     * 被认为是自定义元素的标签
     *
     * @description 用于判断一个标签是否是自定义元素，因为在摘要中，所有的 vue 组件都会被移除
     */
    isCustomElement?: (tagName: string) => boolean;
}
declare const getPageExcerpt: ({ markdown, options: { base } }: App, { content, contentRendered, filePath, filePathRelative, frontmatter }: Page, { isCustomElement, excerptSeparator, excerptLength, }?: PageExcerptOptions) => string;

declare const getPageText: ({ content }: Page) => string;

interface DateOptions {
    /**
     * @default 'en'
     */
    lang?: string;
    timezone?: string;
    /**
     * @default 'full'
     */
    type?: "date" | "time" | "full";
}
declare const timeTransformer: (date: string | Date | undefined, options?: DateOptions) => string | null;
declare const injectLocalizedDate: (page: Page<{
    localizedDate?: string | null;
} & Partial<GitPluginPageData>>, timezone?: string) => void;

declare const getDirContents: (dir: string, base?: string) => string[];

/**
 * @see https://stackoverflow.com/questions/223652/is-there-a-way-to-escape-a-cdata-end-token-in-xml
 */
declare const encodeCDATA: (content: string) => string;
declare const encodeXML: (content: string) => string;

/**
 * Shell Logger
 */
declare class Logger {
    /**
     * Plugin name
     */
    private name;
    private currentInstance;
    constructor(
    /**
     * Plugin name
     */
    name?: string);
    /**
     * Create a loading spinner with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    create(text: string): Ora;
    /**
     * Update current loading spinner text
     *
     * @param text new hint text
     */
    update(text: string): void;
    /**
     * Trigger current instance to loading state or create a new loading spinner with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    load(text?: string): Ora;
    /**
     * Trigger current instance to info state or create a new info icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    info(text?: string, ...args: any[]): Ora;
    /**
     * Trigger current instance to success state or create a new success icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    succeed(text?: string, ...args: any[]): Ora;
    /**
     * Trigger current instance to warn state or create a new warn icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    warn(text?: string, ...args: any[]): Ora;
    /**
     * Trigger current instance to warn state or create a new warn icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    error(text?: string, ...args: any[]): Ora;
}

declare const md2text: (content: string) => string;

type PackageManager = "npm" | "yarn" | "pnpm";
/**
 * Check if a global package manager is available
 */
declare const hasGlobalInstallation: (packageManager: PackageManager) => boolean;
declare const getTypeofLockFile: (cwd?: string, deep?: boolean) => PackageManager | null;
declare const detectPackageManager: (cwd?: string, deep?: boolean) => PackageManager;

declare const utoa: (data: string, level?: DeflateOptions["level"]) => string;
declare const atou: (base64: string) => string;

/**
 * Copied from https://github.com/vuejs/core/blob/b2bac9fa1763ab895f9bea18ef83d58673e1a4ec/packages/shared/src/domTagConfig.ts#L6-L28
 */
declare const HTML_TAGS: string[];
declare const SVG_TAGS: string[];

declare const noopModule = "vuepress-shared/noopModule";

export { Author, AuthorInfo, AuthorName, BasePageFrontMatter, CustomElementCommonOptions, CustomServerCommonOptions, CustomServerOptions, DateDetail, DateInfo, DateOptions, GetLocalesOptions, HTML_TAGS, HopeLang, Logger, PackageManager, PageExcerptOptions, RequiredLocaleConfig, SVG_TAGS, ViteCommonOptions, WebpackCommonOptions, addCustomElement, addViteOptimizeDepsExclude, addViteOptimizeDepsInclude, addViteSsrExternal, addViteSsrNoExternal, atou, chainWebpack, compareDate, deepMerge, detectPackageManager, encodeCDATA, encodeXML, getAuthor, getBundlerName, getCategory, getDate, getDirContents, getLocalePaths, getLocales, getPageExcerpt, getPageText, getRootLang, getRootLangPath, getStringArray, getTag, getTypeofLockFile, hasGlobalInstallation, injectLocalizedDate, isAbsoluteUrl, isUrl, lang2Path, md2text, mergeAlias, mergeViteConfig, noopModule, path2Lang, tagHint, timeTransformer, useCustomDevServer, utoa };
