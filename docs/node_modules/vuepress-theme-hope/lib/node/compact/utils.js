import { colors } from "@vuepress/utils";
import { logger } from "../utils.js";
export const deprecatedLogger = ({ options, deprecatedOption, newOption, msg = "", scope = "", }) => {
    if (deprecatedOption in options) {
        logger.warn(`${colors.magenta(deprecatedOption)} is ${colors.yellow("deprecated")}${scope ? ` in ${scope}` : ""}, please use "${colors.magenta(newOption)}" instead.${msg ? `\n${msg}` : ""}`);
        if (newOption.includes(".")) {
            const keys = newOption.split(".");
            let temp = options;
            keys.forEach((key, index) => {
                if (index !== keys.length - 1) {
                    // ensure level exists
                    temp[key] = temp[key] || {};
                    temp = temp[key];
                }
                else
                    temp[key] = options[deprecatedOption];
            });
        }
        else
            options[newOption] = options[deprecatedOption];
        delete options[deprecatedOption];
    }
};
export const droppedLogger = (options, droppedOption, hint = "", newOption = "") => {
    if (droppedOption in options) {
        logger.error(`"${colors.magenta(droppedOption)}" is ${colors.red("removed")}${newOption
            ? `, please use ${colors.magenta(newOption)} instead.`
            : " and no longer supported"}${hint ? `\n${hint}` : ""}`);
        if (!newOption)
            delete options[droppedOption];
    }
};
export const deprecatedMsg = (deprecatedOptions, hint) => {
    logger.warn(`"${colors.magenta(deprecatedOptions)}" is ${colors.red("deprecated")}, please use "${colors.magenta(hint)}" instead.`);
};
//# sourceMappingURL=utils.js.map