{"version":3,"file":"blog.js","sourceRoot":"","sources":["../../../../src/node/plugins/blog/blog.ts"],"names":[],"mappings":"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","sourcesContent":["import { blogPlugin } from \"vuepress-plugin-blog2\";\n\nimport { getCategoryCategory, getTagCategory } from \"./category.js\";\nimport { filter } from \"./filter.js\";\nimport { injectBasicInfo } from \"./info.js\";\nimport { getArticleType, getStarType, getTimelineType } from \"./type.js\";\nimport { checkFrontmatter } from \"../../frontmatter/check.js\";\nimport { ArticleInfoType } from \"../../../shared/index.js\";\n\nimport type { App, Page, Plugin } from \"@vuepress/core\";\nimport type { BlogOptions } from \"vuepress-plugin-blog2\";\nimport type {\n  BlogPluginOptions,\n  ThemeData,\n  ThemePageData,\n} from \"../../../shared/index.js\";\n\nexport const getBlogPlugin = (\n  app: App,\n  themeData: ThemeData,\n  options?: BlogPluginOptions | boolean,\n  hotReload = false\n): Plugin | null => {\n  if (!options) return null;\n\n  const blogOptions = options === true ? {} : options;\n  const encryptedPaths = Object.keys(themeData.encrypt.config || {});\n  const isPageEncrypted = ({ path }: Page): boolean =>\n    encryptedPaths.some((key) => decodeURI(path).startsWith(key));\n\n  return blogPlugin(<BlogOptions>{\n    excerpt: blogOptions.excerpt !== false,\n\n    excerptFilter: (page) => {\n      const isEncrypted = isPageEncrypted(page);\n\n      return !isEncrypted && !(\"excerpt\" in page.frontmatter);\n    },\n\n    filter: blogOptions.filter || filter,\n\n    getInfo: (page: Page<ThemePageData>) => {\n      const info: Record<string, unknown> = {};\n      const isEncrypted = isPageEncrypted(page);\n\n      checkFrontmatter(page, app.env.isDebug);\n      injectBasicInfo(page, info);\n\n      // resolve encrypted\n      if (isEncrypted) info[ArticleInfoType.isEncrypted] = true;\n\n      // resolve reading-time\n      if (\n        // reading time data is sensitive with markdown contents\n        // we use this to prevent user triggers a page reload every time\n        (hotReload || app.env.isBuild) &&\n        // ensure a valid reading time exists\n        page.data.readingTime &&\n        page.data.readingTime.words !== 0\n      )\n        info[ArticleInfoType.readingTime] = page.data.readingTime;\n\n      return info;\n    },\n\n    category: [\n      getCategoryCategory(blogOptions, themeData),\n      getTagCategory(blogOptions, themeData),\n    ],\n\n    type: [\n      getArticleType(blogOptions, themeData),\n      getStarType(blogOptions, themeData),\n      getTimelineType(blogOptions, themeData),\n      ...(blogOptions.type?.map((type) => ({ layout: \"BlogType\", ...type })) ||\n        []),\n    ],\n\n    metaScope: \"\",\n\n    hotReload,\n    ...(\"hotReload\" in blogOptions ? { hotReload: blogOptions.hotReload } : {}),\n  });\n};\n"]}