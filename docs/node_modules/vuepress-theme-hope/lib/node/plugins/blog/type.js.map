{"version":3,"file":"type.js","sourceRoot":"","sources":["../../../../src/node/plugins/blog/type.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAC/C,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAYnD,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,OAA0B,EAC1B,SAAoB,EAKpB,EAAE,CACF,CAMC;IACC,GAAG,EAAE,SAAS;IACd,MAAM,EAAE,iBAAiB;IACzB,MAAM,EAAE,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,EAAW,EAAE;IACrD,WAAW;IACX,CAAC,WAAW,CAAC,IAAI;QACjB,+BAA+B;QAC/B,CAAC,WAAW,CAAC,OAAO;YAClB,gCAAgC;YAChC,OAAO,CAAC,WAAW,CAAC,OAAO,KAAK,KAAK,IAAI,gBAAgB,CAAC,CAAC;IAC/D,IAAI,EAAE,OAAO,CAAC,OAAO;IACrB,MAAM,EAAE,UAAU;IAClB,WAAW,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAC5B,KAAK,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,OAAO;KACzD,CAAC;CACH,CAAA,CAAC;AAEJ,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,OAA0B,EAC1B,SAAoB,EAKpB,EAAE,CACF,CAMC;IACC,GAAG,EAAE,MAAM;IACX,MAAM,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;IACtD,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACvB,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;QACvC,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;QAEvC,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,KAAK,OAAO;YAC3C,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,OAAO,IAAI,CAAC,OAAO;YAAE,OAAO,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,IAAI,OAAO;YAAE,OAAO,CAAC,CAAC;QAElC,OAAO,WAAW,CAChB,KAAK,CAAC,SAAS,gCAAsB,EACrC,KAAK,CAAC,SAAS,gCAAsB,CACtC,CAAC;IACJ,CAAC;IAED,IAAI,EAAE,OAAO,CAAC,IAAI;IAClB,MAAM,EAAE,UAAU;IAClB,WAAW,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAC5B,KAAK,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,IAAI;KACtD,CAAC;CACH,CAAA,CAAC;AAEJ,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,OAA0B,EAC1B,SAAoB,EAKpB,EAAE,CACF,CAMC;IACC,GAAG,EAAE,UAAU;IACf,MAAM,EAAE,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE,EAAE,CACrC,kCAAwB,SAAS,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,KAAK;IACxE,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CACvB,WAAW,CACT,KAAK,CAAC,SAAS,gCAAsB,EACrC,KAAK,CAAC,SAAS,gCAAsB,CACtC;IACH,IAAI,EAAE,OAAO,CAAC,QAAQ;IACtB,MAAM,EAAE,UAAU;IAClB,WAAW,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAC5B,KAAK,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,QAAQ;KAC1D,CAAC;CACH,CAAA,CAAC","sourcesContent":["import { defaultPageSorter } from \"./utils.js\";\nimport { compareDate } from \"vuepress-shared/node\";\nimport { ArticleInfoType } from \"../../../shared/index.js\";\n\nimport type { BlogTypeOptions } from \"vuepress-plugin-blog2\";\nimport type { GitData } from \"@vuepress/plugin-git\";\nimport type {\n  ArticleInfo,\n  BlogPluginOptions,\n  ThemeData,\n  ThemeNormalPageFrontmatter,\n} from \"../../../shared/index.js\";\n\nexport const getArticleType = (\n  options: BlogPluginOptions,\n  themeData: ThemeData\n): BlogTypeOptions<\n  { git: GitData },\n  ThemeNormalPageFrontmatter,\n  { routeMeta: ArticleInfo }\n> =>\n  <\n    BlogTypeOptions<\n      { git: GitData },\n      ThemeNormalPageFrontmatter,\n      { routeMeta: ArticleInfo }\n    >\n  >{\n    key: \"article\",\n    sorter: defaultPageSorter,\n    filter: ({ frontmatter, filePathRelative }): boolean =>\n      // not home\n      !frontmatter.home &&\n      // declaring this is an article\n      (frontmatter.article ||\n        // generated from markdown files\n        Boolean(frontmatter.article !== false && filePathRelative)),\n    path: options.article,\n    layout: \"BlogType\",\n    frontmatter: (localePath) => ({\n      title: themeData.locales[localePath].blogLocales.article,\n    }),\n  };\n\nexport const getStarType = (\n  options: BlogPluginOptions,\n  themeData: ThemeData\n): BlogTypeOptions<\n  { git: GitData },\n  ThemeNormalPageFrontmatter,\n  { routeMeta: ArticleInfo }\n> =>\n  <\n    BlogTypeOptions<\n      { git: GitData },\n      ThemeNormalPageFrontmatter,\n      { routeMeta: ArticleInfo }\n    >\n  >{\n    key: \"star\",\n    filter: ({ frontmatter }) => Boolean(frontmatter.star),\n    sorter: (pageA, pageB) => {\n      const prevKey = pageA.frontmatter.star;\n      const nextKey = pageB.frontmatter.star;\n\n      if (prevKey && nextKey && prevKey !== nextKey)\n        return Number(nextKey) - Number(prevKey);\n      if (prevKey && !nextKey) return -1;\n      if (!prevKey && nextKey) return 1;\n\n      return compareDate(\n        pageA.routeMeta[ArticleInfoType.date],\n        pageB.routeMeta[ArticleInfoType.date]\n      );\n    },\n\n    path: options.star,\n    layout: \"BlogType\",\n    frontmatter: (localePath) => ({\n      title: themeData.locales[localePath].blogLocales.star,\n    }),\n  };\n\nexport const getTimelineType = (\n  options: BlogPluginOptions,\n  themeData: ThemeData\n): BlogTypeOptions<\n  { git: GitData },\n  ThemeNormalPageFrontmatter,\n  { routeMeta: ArticleInfo }\n> =>\n  <\n    BlogTypeOptions<\n      { git: GitData },\n      ThemeNormalPageFrontmatter,\n      { routeMeta: ArticleInfo }\n    >\n  >{\n    key: \"timeline\",\n    filter: ({ frontmatter, routeMeta }) =>\n      ArticleInfoType.date in routeMeta && frontmatter[\"timeline\"] !== false,\n    sorter: (pageA, pageB) =>\n      compareDate(\n        pageA.routeMeta[ArticleInfoType.date],\n        pageB.routeMeta[ArticleInfoType.date]\n      ),\n    path: options.timeline,\n    layout: \"Timeline\",\n    frontmatter: (localePath) => ({\n      title: themeData.locales[localePath].blogLocales.timeline,\n    }),\n  };\n"]}